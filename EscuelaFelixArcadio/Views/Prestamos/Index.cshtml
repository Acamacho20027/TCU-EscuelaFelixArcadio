@model IEnumerable<EscuelaFelixArcadio.Models.Prestamo>

@{
    ViewBag.Title = "Prestamos";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link href="~/Content/prestamos.css" rel="stylesheet" />
}

<div class="prestamos-container">
    <!-- Header with title and create button -->
    <div class="prestamos-header">
        <h1 class="prestamos-title">Pr&#233;stamos</h1>
        <a href="@Url.Action("Create", "Prestamos")" class="btn-create-prestamos">
            <i class="fas fa-plus"></i>
            Crear Prestamo
        </a>
    </div>

    <!-- Success/Error messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="prestamos-alert prestamos-alert-success">
            <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="prestamos-alert prestamos-alert-error">
            <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
        </div>
    }

    <!-- Filters and search panel -->
        <!-- Notificación de alertas de retraso -->
        <div id="prestamosAlertasContainer" class="prestamos-alertas-container" style="display: none;">
            <div class="prestamos-alertas-header">
                <div class="prestamos-alertas-header-left">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span>Alertas de Retraso</span>
                    <span id="prestamosAlertasCount" class="prestamos-alertas-count">(0)</span>
                </div>
                <button class="prestamos-alertas-close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="prestamos-alertas-body">
                <div id="prestamosAlertasList">
                    <!-- Las alertas se cargarán aquí dinámicamente -->
                </div>
            </div>
        </div>

        <!-- Modal de confirmación personalizado -->
        <div id="prestamosModalOverlay" class="prestamos-modal-overlay" style="display: none;">
            <div class="prestamos-modal">
                <div class="prestamos-modal-header">
                    <i class="fas fa-question-circle"></i>
                    <h3 class="prestamos-modal-title">Confirmar Acci&oacute;n</h3>
                </div>
                <div class="prestamos-modal-body">
                    <p id="prestamosModalMessage" class="prestamos-modal-message">
                        &iquest;Est&aacute; seguro de marcar este pr&eacute;stamo como devuelto?
                    </p>
                </div>
                <div class="prestamos-modal-actions">
                    <button id="prestamosModalConfirm" class="btn-modal-confirm">
                        <i class="fas fa-check"></i>
                        Confirmar
                    </button>
                    <button id="prestamosModalCancel" class="btn-modal-cancel">
                        <i class="fas fa-times"></i>
                        Cancelar
                    </button>
                </div>
            </div>
        </div>

    <div class="prestamos-filters-panel">
        <!-- Search bar -->
        <div class="prestamos-search-bar" style="position: relative;">
            <i class="fas fa-search prestamos-search-icon"></i>
            <input type="text" id="searchInput" class="prestamos-search-input" placeholder="Buscar por numero de prestamo o notas...">
        </div>

        <!-- Filter dropdowns -->
        <div class="prestamos-filters-row">
            <div class="prestamos-filter-group">
                <label class="prestamos-filter-label">Estado</label>
                <select id="estadoFilter" class="prestamos-filter-select">
                    <option value="">Todos los estados</option>
                    @foreach (var estado in ViewBag.Estados as SelectList)
                    {
                        <option value="@estado.Value">@estado.Text</option>
                    }
                </select>
            </div>

            <div class="prestamos-filter-group">
                <label class="prestamos-filter-label">Usuario</label>
                <select id="usuarioFilter" class="prestamos-filter-select">
                    <option value="">Todos los usuarios</option>
                    @foreach (var usuario in ViewBag.Usuarios as SelectList)
                    {
                        <option value="@usuario.Value">@usuario.Text</option>
                    }
                </select>
            </div>
        </div>

        <!-- Controls row -->
        <div class="prestamos-controls-row">
            <div class="prestamos-sort-group">
                <label class="prestamos-sort-label">Ordenar por:</label>
                <select id="sortBy" class="prestamos-filter-select">
                    <option value="fecha">Fecha de Creacion</option>
                    <option value="numero">Numero de Prestamo</option>
                    <option value="usuario">Usuario</option>
                    <option value="estado">Estado</option>
                </select>
                <select id="sortOrder" class="prestamos-filter-select">
                    <option value="desc">Descendente</option>
                    <option value="asc">Ascendente</option>
                </select>
            </div>

            <div class="prestamos-items-per-page">
                <label class="prestamos-items-label">Mostrar:</label>
                <select id="pageSize" class="prestamos-filter-select">
                    <option value="12">12</option>
                    <option value="24">24</option>
                    <option value="48">48</option>
                </select>
            </div>

            <button id="clearFilters" class="prestamos-clear-filters">
                <i class="fas fa-times"></i> Limpiar Filtros
            </button>
        </div>
    </div>

    <!-- Loading indicator -->
    <div id="loadingIndicator" class="prestamos-loading" style="display: none;">
        <div class="prestamos-spinner"></div>
        <span>Cargando prestamos...</span>
    </div>

    <!-- Prestamos cards grid -->
    <div id="prestamosGrid" class="prestamos-cards-grid">
        @foreach (var item in Model)
        {
            var statusClass = "";
            var estadoDescripcion = item.Estado.Descripcion.ToLower();
            
            if (estadoDescripcion.Contains("activo") && !estadoDescripcion.Contains("inactivo"))
            {
                statusClass = "activo";
            }
            else if (estadoDescripcion.Contains("pendiente"))
            {
                statusClass = "pendiente";
            }
            else if (estadoDescripcion.Contains("devuelto") || estadoDescripcion.Contains("completado"))
            {
                statusClass = "devuelto";
            }
            else if (estadoDescripcion.Contains("vencido"))
            {
                statusClass = "vencido";
            }
            else
            {
                statusClass = "pendiente";
            }

            <div class="prestamos-card">
                <span class="prestamos-card-status @statusClass">@item.Estado.Descripcion</span>
                
                <div class="prestamos-card-header">
                    <h3 class="prestamos-card-number">Prestamo #@item.NumeroPrestamo</h3>
                    <p class="prestamos-card-user">
                        <i class="fas fa-user"></i> @(item.ApplicationUser?.UserName ?? "Usuario no encontrado")
                    </p>
                </div>

                <div class="prestamos-card-details">
                    <div class="prestamos-card-detail">
                        <span class="prestamos-card-detail-label">Fecha de Creacion</span>
                        <span class="prestamos-card-detail-value">@item.FechadeCreacion.ToString("dd/MM/yyyy")</span>
                    </div>
                    <div class="prestamos-card-detail">
                        <span class="prestamos-card-detail-label">Fecha de Devolucion</span>
                        <span class="prestamos-card-detail-value">
                            @if (item.FechaDevolucion.HasValue)
                            {
                                @item.FechaDevolucion.Value.ToString("dd/MM/yyyy")
                            }
                            else
                            {
                                <text>Pendiente</text>
                            }
                        </span>
                    </div>
                    @if (!string.IsNullOrEmpty(item.Notas))
                    {
                        <div class="prestamos-card-detail">
                            <span class="prestamos-card-detail-label">Notas</span>
                            <span class="prestamos-card-detail-value">@item.Notas</span>
                        </div>
                    }
                </div>

                <div class="prestamos-card-footer">
                    <span class="prestamos-card-id">
                        <i class="fas fa-hashtag"></i> ID: @item.IdPrestamo
                    </span>
                    <div class="prestamos-card-actions">
                        <a href="@Url.Action("Details", new { id = item.IdPrestamo })" class="btn-prestamos-action btn-prestamos-details">
                            <i class="fas fa-eye"></i> Detalle
                        </a>
                        <a href="@Url.Action("Delete", new { id = item.IdPrestamo })" class="btn-prestamos-action btn-prestamos-delete">
                            <i class="fas fa-trash-alt"></i>
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination -->
    <div id="pagination" class="prestamos-pagination">
        <!-- Pagination will be generated by JavaScript -->
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            var currentPage = 1;
            var pageSize = 12;
            var totalPages = @ViewBag.TotalPages;

            // Initialize pagination
            updatePagination(@ViewBag.CurrentPage, @ViewBag.TotalPages, @ViewBag.TotalItems);

            // Search input with debounce
            var searchTimeout;
            $('#searchInput').on('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(function() {
                    currentPage = 1;
                    loadPrestamos();
                }, 500);
            });

            // Filter changes
            $('#estadoFilter, #usuarioFilter, #sortBy, #sortOrder, #pageSize').on('change', function() {
                if ($(this).attr('id') === 'pageSize') {
                    pageSize = parseInt($(this).val());
                }
                currentPage = 1;
                loadPrestamos();
            });

            // Clear filters
            $('#clearFilters').on('click', function() {
                $('#searchInput').val('');
                $('#estadoFilter').val('');
                $('#usuarioFilter').val('');
                $('#sortBy').val('fecha');
                $('#sortOrder').val('desc');
                $('#pageSize').val('12');
                pageSize = 12;
                currentPage = 1;
                loadPrestamos();
            });

            // Cargar alertas de retraso
            loadAlertasRetraso();
            
            // Actualizar alertas cada 5 minutos (solo si no están cerradas manualmente)
            var alertasCerradas = false;
            setInterval(function() {
                if (!alertasCerradas) {
                    loadAlertasRetraso();
                }
            }, 300000);
            
            // Event delegation para botones de alertas
            $(document).on('click', '.btn-alerta-contactar', function() {
                var email = $(this).data('email');
                contactarUsuario(email);
            });
            
            $(document).on('click', '.btn-alerta-devolver', function() {
                var id = $(this).data('id');
                marcarDevuelto(id);
            });
            
            $(document).on('click', '.prestamos-alertas-close', function() {
                cerrarAlertas();
            });

            // Load prestamos with AJAX
            function loadPrestamos() {
                $('#loadingIndicator').show();
                $('#prestamosGrid').css('opacity', '0.5');

                $.ajax({
                    url: '@Url.Action("SearchPrestamos", "Prestamos")',
                    type: 'GET',
                    data: {
                        search: $('#searchInput').val(),
                        estado: $('#estadoFilter').val(),
                        usuario: $('#usuarioFilter').val(),
                        sortBy: $('#sortBy').val(),
                        sortOrder: $('#sortOrder').val(),
                        page: currentPage,
                        pageSize: pageSize
                    },
                    success: function(data) {
                        renderPrestamos(data.items);
                        updatePagination(data.currentPage, data.totalPages, data.totalItems);
                        totalPages = data.totalPages;
                        $('#loadingIndicator').hide();
                        $('#prestamosGrid').css('opacity', '1');
                    },
                    error: function() {
                        $('#loadingIndicator').hide();
                        $('#prestamosGrid').css('opacity', '1');
                        alert('Error al cargar los prestamos');
                    }
                });
            }

            // Render prestamos cards
            function renderPrestamos(prestamos) {
                var html = '';
                
                if (prestamos.length === 0) {
                    html = '<div style="grid-column: 1/-1; text-align: center; padding: 3rem; color: #6b7280;">';
                    html += '<i class="fas fa-inbox" style="font-size: 3rem; margin-bottom: 1rem;"></i>';
                    html += '<p style="font-size: 1.125rem; font-weight: 500;">No se encontraron prestamos</p>';
                    html += '</div>';
                } else {
                    prestamos.forEach(function(prestamo) {
                        var statusClass = getStatusClass(prestamo.EstadoDescripcion);
                        
                        html += '<div class="prestamos-card">';
                        html += '<span class="prestamos-card-status ' + statusClass + '">' + prestamo.EstadoDescripcion + '</span>';
                        html += '<div class="prestamos-card-header">';
                        html += '<h3 class="prestamos-card-number">Prestamo #' + prestamo.NumeroPrestamo + '</h3>';
                        html += '<p class="prestamos-card-user"><i class="fas fa-user"></i> ' + prestamo.UsuarioNombre + '</p>';
                        html += '</div>';
                        html += '<div class="prestamos-card-details">';
                        html += '<div class="prestamos-card-detail">';
                        html += '<span class="prestamos-card-detail-label">Fecha de Creacion</span>';
                        html += '<span class="prestamos-card-detail-value">' + prestamo.FechadeCreacion + '</span>';
                        html += '</div>';
                        html += '<div class="prestamos-card-detail">';
                        html += '<span class="prestamos-card-detail-label">Fecha de Devolucion</span>';
                        html += '<span class="prestamos-card-detail-value">' + prestamo.FechaDevolucion + '</span>';
                        html += '</div>';
                        if (prestamo.Notas && prestamo.Notas !== 'Sin notas') {
                            html += '<div class="prestamos-card-detail">';
                            html += '<span class="prestamos-card-detail-label">Notas</span>';
                            html += '<span class="prestamos-card-detail-value">' + prestamo.Notas + '</span>';
                            html += '</div>';
                        }
                        html += '</div>';
                        html += '<div class="prestamos-card-footer">';
                        html += '<span class="prestamos-card-id"><i class="fas fa-hashtag"></i> ID: ' + prestamo.IdPrestamo + '</span>';
                        html += '<div class="prestamos-card-actions">';
                        html += '<a href="@Url.Action("Details", "Prestamos")/' + prestamo.IdPrestamo + '" class="btn-prestamos-action btn-prestamos-details">';
                        html += '<i class="fas fa-eye"></i> Detalle</a>';
                        html += '<a href="@Url.Action("Delete", "Prestamos")/' + prestamo.IdPrestamo + '" class="btn-prestamos-action btn-prestamos-delete">';
                        html += '<i class="fas fa-trash-alt"></i></a>';
                        html += '</div></div></div>';
                    });
                }
                
                $('#prestamosGrid').html(html);
                
                // Forzar color rojo para estados INACTIVO
                $('.prestamos-card-status').each(function() {
                    var text = $(this).text().toUpperCase();
                    if (text.includes('INACTIVO')) {
                        $(this).css({
                            'background': '#fee2e2 !important',
                            'background-color': '#fee2e2 !important',
                            'color': '#991b1b !important'
                        });
                    }
                });
            }

            // Get status class
            function getStatusClass(estado) {
                var estadoLower = estado.toLowerCase();
                console.log('Estado recibido:', estado, 'Estado lower:', estadoLower);
                
                if (estadoLower.includes('inactivo')) {
                    console.log('Detectado como inactivo');
                    return 'inactivo';
                } else if (estadoLower.includes('activo')) {
                    console.log('Detectado como activo');
                    return 'activo';
                } else if (estadoLower.includes('pendiente')) {
                    console.log('Detectado como pendiente');
                    return 'pendiente';
                } else if (estadoLower.includes('devuelto') || estadoLower.includes('completado')) {
                    console.log('Detectado como devuelto');
                    return 'devuelto';
                } else if (estadoLower.includes('vencido')) {
                    console.log('Detectado como vencido');
                    return 'vencido';
                }
                console.log('Estado por defecto: pendiente');
                return 'pendiente';
            }

            // Cargar alertas de retraso
            function loadAlertasRetraso() {
                $.ajax({
                    url: '@Url.Action("GetAlertasRetraso", "Prestamos")',
                    type: 'GET',
                    success: function(data) {
                        if (data.success && data.alertas.length > 0) {
                            displayAlertas(data.alertas);
                        } else {
                            hideAlertas();
                        }
                    },
                    error: function() {
                        console.log('Error al cargar alertas de retraso');
                    }
                });
            }

            // Mostrar alertas
            function displayAlertas(alertas) {
                // Solo mostrar si no fueron cerradas manualmente
                if (alertasCerradas) {
                    return;
                }
                
                var container = $('#prestamosAlertasContainer');
                var count = $('#prestamosAlertasCount');
                var list = $('#prestamosAlertasList');
                
                count.text('(' + alertas.length + ')');
                
                var html = '';
                alertas.forEach(function(alerta) {
                    html += '<div class="prestamos-alerta-item">';
                    html += '<div class="prestamos-alerta-icon">';
                    html += '<i class="fas fa-exclamation-triangle"></i>';
                    html += '</div>';
                    html += '<div class="prestamos-alerta-content">';
                    html += '<div class="prestamos-alerta-title">Pr&eacute;stamo #' + alerta.NumeroPrestamo + ' - ' + alerta.UsuarioNombre + '</div>';
                    html += '<div class="prestamos-alerta-details">';
                    html += '<strong>' + alerta.DiasRetraso + ' d&iacute;as de retraso</strong><br>';
                    html += alerta.MotivoPrestamo + '<br>';
                    html += '<small>' + alerta.UsuarioEmail + '</small>';
                    html += '</div>';
                    html += '<div class="prestamos-alerta-actions">';
                    html += '<button class="btn-alerta-contactar" data-email="' + alerta.UsuarioEmail + '">';
                    html += '<i class="fas fa-envelope"></i> Contactar';
                    html += '</button>';
                    html += '<button class="btn-alerta-devolver" data-id="' + alerta.IdPrestamo + '">';
                    html += '<i class="fas fa-check"></i> Marcar Devuelto';
                    html += '</button>';
                    html += '</div>';
                    html += '</div>';
                    html += '</div>';
                });
                
                list.html(html);
                container.show().addClass('has-alerts');
            }

            // Ocultar alertas
            function hideAlertas() {
                $('#prestamosAlertasContainer').hide().removeClass('has-alerts');
            }

            // Cerrar alertas con animación
            function cerrarAlertas() {
                var container = $('#prestamosAlertasContainer');
                container.addClass('closing');
                alertasCerradas = true; // Marcar como cerradas manualmente
                setTimeout(function() {
                    container.hide().removeClass('has-alerts closing');
                }, 300);
            }

            // Contactar usuario
            function contactarUsuario(email) {
                if (email && email !== 'No disponible' && email !== '') {
                    var subject = 'Recordatorio de Pr&eacute;stamo Vencido';
                    var body = 'Estimado usuario,%0D%0A%0D%0ATiene un pr&eacute;stamo vencido que necesita ser devuelto.%0D%0A%0D%0APor favor, contacte con nosotros para coordinar la devoluci&oacute;n.%0D%0A%0D%0AGracias.';
                    var mailtoLink = 'mailto:' + email + '?subject=' + encodeURIComponent(subject) + '&body=' + encodeURIComponent(body);
                    window.open(mailtoLink);
                } else {
                    alert('No se puede contactar: Email no disponible');
                }
            }

            // Marcar como devuelto
            function marcarDevuelto(idPrestamo) {
                mostrarModalConfirmacion(
                    '&iquest;Est&aacute; seguro de marcar este pr&eacute;stamo como devuelto?',
                    function() {
                        // Función de confirmación
                        $.ajax({
                            url: '@Url.Action("MarcarDevuelto", "Prestamos")',
                            type: 'POST',
                            data: { id: idPrestamo },
                            success: function(data) {
                                if (data.success) {
                                    mostrarModalExito('Pr&eacute;stamo marcado como devuelto exitosamente');
                                    alertasCerradas = false; // Reactivar alertas para mostrar cambios
                                    loadAlertasRetraso(); // Recargar alertas
                                    loadPrestamos(); // Recargar lista de préstamos
                                } else {
                                    mostrarModalError('Error: ' + data.message);
                                }
                            },
                            error: function(xhr, status, error) {
                                console.log('Error AJAX:', error);
                                mostrarModalError('Error al marcar como devuelto. Verifique la consola para m&aacute;s detalles.');
                            }
                        });
                    }
                );
            }

            // Mostrar modal de confirmación personalizado
            function mostrarModalConfirmacion(mensaje, callbackConfirmar) {
                $('#prestamosModalMessage').html(mensaje);
                $('#prestamosModalOverlay').show();
                
                // Limpiar eventos anteriores
                $('#prestamosModalConfirm').off('click');
                $('#prestamosModalCancel').off('click');
                
                // Evento confirmar
                $('#prestamosModalConfirm').on('click', function() {
                    cerrarModal();
                    if (callbackConfirmar) {
                        callbackConfirmar();
                    }
                });
                
                // Evento cancelar
                $('#prestamosModalCancel').on('click', function() {
                    cerrarModal();
                });
                
                // Cerrar con ESC
                $(document).on('keydown.modal', function(e) {
                    if (e.keyCode === 27) { // ESC
                        cerrarModal();
                    }
                });
            }

            // Mostrar modal de éxito
            function mostrarModalExito(mensaje) {
                $('#prestamosModalMessage').html(mensaje);
                $('.prestamos-modal-header').css('background', '#10b981');
                $('.prestamos-modal-header i').removeClass('fa-question-circle').addClass('fa-check-circle');
                $('.prestamos-modal-title').html('&Eacute;xito');
                $('#prestamosModalOverlay').show();
                
                // Solo botón OK
                $('#prestamosModalCancel').hide();
                $('#prestamosModalConfirm').text('Aceptar').off('click').on('click', function() {
                    cerrarModal();
                });
                
                // Auto-cerrar después de 3 segundos
                setTimeout(function() {
                    cerrarModal();
                }, 3000);
            }

            // Mostrar modal de error
            function mostrarModalError(mensaje) {
                $('#prestamosModalMessage').html(mensaje);
                $('.prestamos-modal-header').css('background', '#dc2626');
                $('.prestamos-modal-header i').removeClass('fa-question-circle').addClass('fa-exclamation-triangle');
                $('.prestamos-modal-title').text('Error');
                $('#prestamosModalOverlay').show();
                
                // Solo botón OK
                $('#prestamosModalCancel').hide();
                $('#prestamosModalConfirm').text('Aceptar').off('click').on('click', function() {
                    cerrarModal();
                });
            }

            // Cerrar modal
            function cerrarModal() {
                var overlay = $('#prestamosModalOverlay');
                var modal = $('.prestamos-modal');
                
                modal.addClass('closing');
                overlay.addClass('closing');
                
                setTimeout(function() {
                    overlay.hide().removeClass('closing');
                    modal.removeClass('closing');
                    
                    // Restaurar estado original
                    $('.prestamos-modal-header').css('background', '#dc2626');
                    $('.prestamos-modal-header i').removeClass('fa-check-circle fa-exclamation-triangle').addClass('fa-question-circle');
                    $('.prestamos-modal-title').html('Confirmar Acci&oacute;n');
                    $('#prestamosModalCancel').show();
                    $('#prestamosModalConfirm').html('<i class="fas fa-check"></i> Confirmar');
                    
                    // Limpiar eventos
                    $(document).off('keydown.modal');
                }, 200);
            }

            // Update pagination
            function updatePagination(current, total, totalItems) {
                var html = '';
                
                if (total > 0) {
                    // Primera página
                    if (current > 1) {
                        html += '<button class="prestamos-pagination-btn" onclick="goToPage(1)">Primera</button>';
                    } else {
                        html += '<button class="prestamos-pagination-btn" disabled>Primera</button>';
                    }
                    
                    // Anterior
                    if (current > 1) {
                        html += '<button class="prestamos-pagination-btn" onclick="goToPage(' + (current - 1) + ')">Anterior</button>';
                    } else {
                        html += '<button class="prestamos-pagination-btn" disabled>Anterior</button>';
                    }
                    
                    // Page numbers
                    var startPage = Math.max(1, current - 2);
                    var endPage = Math.min(total, current + 2);
                    
                    if (startPage > 1) {
                        html += '<span class="prestamos-pagination-dots">...</span>';
                    }
                    
                    for (var i = startPage; i <= endPage; i++) {
                        html += '<button class="prestamos-pagination-btn ' + (i === current ? 'active' : '') + '" onclick="goToPage(' + i + ')">' + i + '</button>';
                    }
                    
                    if (endPage < total) {
                        html += '<span class="prestamos-pagination-dots">...</span>';
                    }
                    
                    // Siguiente
                    if (current < total) {
                        html += '<button class="prestamos-pagination-btn" onclick="goToPage(' + (current + 1) + ')">Siguiente</button>';
                    } else {
                        html += '<button class="prestamos-pagination-btn" disabled>Siguiente</button>';
                    }
                    
                    // Última página
                    if (current < total) {
                        html += '<button class="prestamos-pagination-btn" onclick="goToPage(' + total + ')">Ultima</button>';
                    } else {
                        html += '<button class="prestamos-pagination-btn" disabled>Ultima</button>';
                    }
                }
                
                $('#pagination').html(html);
            }

            // Go to page function
            window.goToPage = function(page) {
                if (page >= 1 && page <= totalPages) {
                    currentPage = page;
                    loadPrestamos();
                }
            };
        });
    </script>
}

