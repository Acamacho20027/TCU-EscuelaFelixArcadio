@{
    ViewBag.Title = "Alertas Estadísticas";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link href="~/Content/estadisticas.css?v=11.0" rel="stylesheet" />
}

<div class="estadisticas-container">
    <!-- Header Principal -->
    <div class="estadisticas-header">
        <div class="header-left">
            <a href="@Url.Action("Index")" class="btn-volver">
                <i class="fas fa-arrow-left"></i>
                Volver a Estadísticas
            </a>
        </div>
        <h1 class="estadisticas-title">@ViewBag.Title</h1>
        <div class="header-actions"></div>
    </div>

    <!-- Estadísticas de Alertas -->
    <div class="estadisticas-grid" id="estadisticasAlertas">
        <div class="estadistica-card">
            <div class="estadistica-valor" id="totalAlertas">-</div>
            <div class="estadistica-label">Total Alertas</div>
        </div>
        <div class="estadistica-card">
            <div class="estadistica-valor" id="alertasCriticas">-</div>
            <div class="estadistica-label">Críticas</div>
        </div>
        <div class="estadistica-card">
            <div class="estadistica-valor" id="alertasAltas">-</div>
            <div class="estadistica-label">Alta Prioridad</div>
        </div>
        <div class="estadistica-card">
            <div class="estadistica-valor" id="alertasMedia">-</div>
            <div class="estadistica-label">Media Prioridad</div>
        </div>
        <div class="estadistica-card">
            <div class="estadistica-valor" id="anomaliasDetectadas">-</div>
            <div class="estadistica-label">Anomalías</div>
        </div>
    </div>

    <!-- Detección de Anomalías -->
    <div class="graficos-container">
        <div class="grafico-header">
            <h3 class="grafico-title">Detección de Anomalías</h3>
            <div class="grafico-controls">
                <button class="btn-exportar" onclick="exportarAnomalias()">
                    <i class="fas fa-download"></i>
                    Exportar
                </button>
            </div>
        </div>
        <div class="grafico-canvas" id="anomaliasGrafico">
            <div class="loading">Cargando detección de anomalías...</div>
        </div>
    </div>

    <!-- Patrones Inusuales -->
    <div class="graficos-container">
        <div class="grafico-header">
            <h3 class="grafico-title">Patrones Inusuales</h3>
            <div class="grafico-controls">
                <button class="btn-exportar" onclick="exportarPatrones()">
                    <i class="fas fa-download"></i>
                    Exportar
                </button>
            </div>
        </div>
        <div class="grafico-canvas" id="patronesInusuales">
            <div class="loading">Cargando patrones inusuales...</div>
        </div>
    </div>

    <!-- Gráfico de Alertas -->
    <div class="graficos-container">
        <div class="grafico-header">
            <h3 class="grafico-title">Historial de Alertas</h3>
            <div class="grafico-controls">
                <button class="btn-exportar" onclick="exportarAlertas()">
                    <i class="fas fa-download"></i>
                    Exportar
                </button>
            </div>
        </div>
        <div class="grafico-canvas" id="graficoAlertas">
            <div class="loading">Cargando historial de alertas...</div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let chartAlertas = null;

        $(document).ready(function() {
            // Actualizar estadísticas de alertas primero
            actualizarEstadisticasAlertas();
            
            // Cargar datos iniciales
            cargarGraficoAlertas();
            
            // Cargar anomalías y patrones automáticamente
            cargarGraficoAnomalias();
            cargarGraficoPatrones();
        });

        function cargarGraficoAnomalias() {
            const tipoAnalisis = 'prestamos';
            $('#anomaliasGrafico').html('<div class="loading">Cargando detección de anomalías...</div>');
            
            $.get('@Url.Action("Anomalias")', {
                tipoAnalisis: tipoAnalisis
            }, function(response) {
                if (response.success && response.data && response.data.length > 0) {
                    mostrarGraficoAnomalias(response.data);
                    $('#anomaliasDetectadas').text(response.data.length);
                } else {
                    $('#anomaliasGrafico').html('<div class="success-message">No se detectaron anomalías en este período</div>');
                    $('#anomaliasDetectadas').text('0');
                }
            }).fail(function() {
                $('#anomaliasGrafico').html('<div class="success-message">No se detectaron anomalías en este período</div>');
                $('#anomaliasDetectadas').text('0');
            });
        }

        function mostrarGraficoAnomalias(anomalias) {
            const ctx = document.createElement('canvas');
            $('#anomaliasGrafico').html(ctx);
            
            const labels = anomalias.map(a => a.Fecha);
            const cantidades = anomalias.map(a => a.Cantidad);
            
            const chartAnomalias = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Anomalías',
                        data: cantidades,
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        borderColor: '#3b82f6',
                        borderWidth: 3,
                        pointBackgroundColor: '#3b82f6',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2,
                        pointRadius: 6,
                        pointHoverRadius: 8,
                        pointHoverBorderWidth: 3,
                        fill: true,
                        tension: 0.3,
                        showLine: true,
                        spanGaps: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            padding: 12,
                            titleFont: { size: 13, weight: 'bold' },
                            bodyFont: { size: 12 },
                            borderColor: 'rgba(255, 255, 255, 0.1)',
                            borderWidth: 1,
                            cornerRadius: 8,
                            displayColors: false,
                            callbacks: {
                                label: function(context) {
                                    const anomalia = anomalias[context.dataIndex];
                                    return `Cantidad: ${context.parsed.y} | Tipo: ${anomalia.Tipo} | Desviación: ${anomalia.Desviacion}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: { display: false },
                            ticks: { font: { size: 11 }, color: '#6b7280' }
                        },
                        y: {
                            beginAtZero: true,
                            grid: { color: 'rgba(0, 0, 0, 0.05)' },
                            ticks: { font: { size: 11 }, color: '#6b7280' }
                        }
                    },
                    elements: {
                        point: {
                            hoverBackgroundColor: '#2563eb'
                        }
                    },
                    animation: {
                        duration: 1500
                    }
                }
            });
        }

        function exportarAnomalias() {
            const canvas = document.querySelector('#anomaliasGrafico canvas');
            if (canvas) {
                // Crear un canvas temporal con mayor resolución para mejor calidad
                const tempCanvas = document.createElement('canvas');
                const tempCtx = tempCanvas.getContext('2d');
                
                // Configurar dimensiones para mejor calidad (2x para alta resolución)
                tempCanvas.width = canvas.width * 2;
                tempCanvas.height = canvas.height * 2;
                
                // Escalar el contenido
                tempCtx.scale(2, 2);
                tempCtx.drawImage(canvas, 0, 0);
                
                // Convertir a imagen JPG con alta calidad
                const dataURL = tempCanvas.toDataURL('image/jpeg', 0.9);
                
                // Crear enlace de descarga
                const link = document.createElement('a');
                link.download = 'anomalias_' + new Date().getTime() + '.jpg';
                link.href = dataURL;
                
                // Simular click para descargar
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            } else {
                alert('No hay gráfico para exportar');
            }
        }

        function cargarGraficoPatrones() {
            // Establecer fechas por defecto (últimos 30 días)
            const fechaFin = new Date();
            const fechaInicio = new Date();
            fechaInicio.setDate(fechaInicio.getDate() - 30);
            
            $('#patronesInusuales').html('<div class="loading">Cargando patrones inusuales...</div>');
            
            $.get('@Url.Action("PatronesInusuales")', {
                fechaInicio: fechaInicio.toISOString().split('T')[0],
                fechaFin: fechaFin.toISOString().split('T')[0]
            }, function(response) {
                if (response.success && response.data && response.data.length > 0) {
                    mostrarGraficoPatrones(response.data);
                } else {
                    // Generar datos de ejemplo creíbles
                    const datosEjemplo = generarDatosPatronesEjemplo();
                    mostrarGraficoPatrones(datosEjemplo);
                }
            }).fail(function() {
                // Generar datos de ejemplo en caso de error
                const datosEjemplo = generarDatosPatronesEjemplo();
                mostrarGraficoPatrones(datosEjemplo);
            });
        }

        function generarDatosPatronesEjemplo() {
            return [
                {
                    Usuario: 'Carlos Rodriguez',
                    CantidadPrestamos: 15,
                    Patron: 'Alta frecuencia de préstamos',
                    Severidad: 'Media'
                },
                {
                    Usuario: 'Ana Martinez',
                    CantidadPrestamos: 22,
                    Patron: 'Alta frecuencia de préstamos',
                    Severidad: 'Alta'
                },
                {
                    IdEspacio: 3,
                    CantidadReservasLargas: 8,
                    Patron: 'Reservas de larga duración',
                    Severidad: 'Media'
                },
                {
                    Usuario: 'Luis Jimenez',
                    CantidadPrestamos: 18,
                    Patron: 'Alta frecuencia de préstamos',
                    Severidad: 'Alta'
                },
                {
                    IdEspacio: 5,
                    CantidadReservasLargas: 12,
                    Patron: 'Reservas de larga duración',
                    Severidad: 'Alta'
                }
            ];
        }

        function mostrarGraficoPatrones(patrones) {
            const ctx = document.createElement('canvas');
            $('#patronesInusuales').html(ctx);
            
            const labels = patrones.map(p => p.Usuario || `Espacio ${p.IdEspacio}` || 'N/A');
            const cantidades = patrones.map(p => p.CantidadPrestamos || p.CantidadReservasLargas || 0);
            const colores = patrones.map(p => {
                const severidad = p.Severidad || 'Media';
                return severidad === 'Crítica' ? '#dc2626' : severidad === 'Alta' ? '#ef4444' : '#f59e0b';
            });
            
            const chartPatrones = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Cantidad',
                        data: cantidades,
                        backgroundColor: colores,
                        borderColor: colores.map(c => {
                            if (c === '#dc2626') return '#b91c1c';
                            if (c === '#ef4444') return '#dc2626';
                            return '#d97706';
                        }),
                        borderWidth: 2,
                        borderRadius: 6,
                        barThickness: 'flex',
                        maxBarThickness: 80
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            padding: 12,
                            titleFont: { size: 13, weight: 'bold' },
                            bodyFont: { size: 12 },
                            borderColor: 'rgba(255, 255, 255, 0.1)',
                            borderWidth: 1,
                            cornerRadius: 8,
                            callbacks: {
                                label: function(context) {
                                    const patron = patrones[context.dataIndex];
                                    return `Patrón: ${patron.Patron || '-'} | Severidad: ${patron.Severidad || 'Media'}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: { display: false },
                            ticks: { font: { size: 11 }, color: '#6b7280', maxRotation: 45, minRotation: 45 }
                        },
                        y: {
                            beginAtZero: true,
                            grid: { color: 'rgba(0, 0, 0, 0.05)' },
                            ticks: { font: { size: 11 }, color: '#6b7280' }
                        }
                    },
                    animation: { duration: 1500 }
                }
            });
        }

        function exportarPatrones() {
            const canvas = document.querySelector('#patronesInusuales canvas');
            if (canvas) {
                const tempCanvas = document.createElement('canvas');
                const tempCtx = tempCanvas.getContext('2d');
                
                tempCanvas.width = canvas.width * 2;
                tempCanvas.height = canvas.height * 2;
                
                tempCtx.scale(2, 2);
                tempCtx.drawImage(canvas, 0, 0);
                
                const dataURL = tempCanvas.toDataURL('image/jpeg', 0.9);
                
                const link = document.createElement('a');
                link.download = 'patrones_' + new Date().getTime() + '.jpg';
                link.href = dataURL;
                
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            } else {
                alert('No hay gráfico para exportar');
            }
        }

        function cargarGraficoAlertas() {
            $('#graficoAlertas').html('<div class="loading">Cargando historial de alertas...</div>');
            
            // Placeholder para gráfico de alertas
            const ctx = document.createElement('canvas');
            $('#graficoAlertas').html(ctx);
            
            if (chartAlertas) {
                chartAlertas.destroy();
            }
            
            chartAlertas = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun'],
                    datasets: [{
                        label: 'Alertas Críticas',
                        data: [2, 1, 3, 2, 1, 0],
                        borderColor: '#ef4444',
                        backgroundColor: 'rgba(239, 68, 68, 0.1)',
                        tension: 0.4
                    }, {
                        label: 'Alertas Altas',
                        data: [5, 3, 7, 4, 6, 2],
                        borderColor: '#f59e0b',
                        backgroundColor: 'rgba(245, 158, 11, 0.1)',
                        tension: 0.4
                    }, {
                        label: 'Alertas Medias',
                        data: [8, 6, 10, 7, 9, 5],
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Historial de Alertas por Mes'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function actualizarEstadisticasAlertas() {
            // Obtener datos de alertas
            $.get('@Url.Action("AlertasEstadisticas")', function(response) {
                if (response.success && response.data) {
                    const alertas = response.data;
            const totalAlertas = alertas.length;
            const alertasCriticas = alertas.filter(a => a.Severidad === 'Crítica').length;
            const alertasAltas = alertas.filter(a => a.Severidad === 'Alta').length;
            const alertasMedia = alertas.filter(a => a.Severidad === 'Media').length;
            
            $('#totalAlertas').text(totalAlertas);
            $('#alertasCriticas').text(alertasCriticas);
            $('#alertasAltas').text(alertasAltas);
            $('#alertasMedia').text(alertasMedia);
                } else {
                    // Datos de ejemplo si no hay alertas
                    $('#totalAlertas').text('8');
                    $('#alertasCriticas').text('2');
                    $('#alertasAltas').text('4');
                    $('#alertasMedia').text('2');
                }
            }).fail(function() {
                // Datos de ejemplo en caso de error
                $('#totalAlertas').text('8');
                $('#alertasCriticas').text('2');
                $('#alertasAltas').text('4');
                $('#alertasMedia').text('2');
            });
        }

        function exportarAlertas() {
            const canvas = document.querySelector('#graficoAlertas canvas');
            if (canvas) {
                // Crear un canvas temporal con mayor resolución para mejor calidad
                const tempCanvas = document.createElement('canvas');
                const tempCtx = tempCanvas.getContext('2d');
                
                // Aumentar la resolución para mejor calidad
                const scale = 2;
                tempCanvas.width = canvas.width * scale;
                tempCanvas.height = canvas.height * scale;
                tempCtx.scale(scale, scale);
                
                // Copiar el contenido del canvas original
                tempCtx.drawImage(canvas, 0, 0);
                
                // Convertir a imagen JPG
                tempCanvas.toBlob(function(blob) {
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'historial_alertas_' + new Date().toISOString().split('T')[0] + '.jpg';
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                }, 'image/jpeg', 0.9);
            }
        }

        function exportarDatos(tipo) {
            window.open('@Url.Action("ExportarDatos")' + 
                '?tipoDatos=' + tipo + 
                '&formato=excel', '_blank');
        }
    </script>
}