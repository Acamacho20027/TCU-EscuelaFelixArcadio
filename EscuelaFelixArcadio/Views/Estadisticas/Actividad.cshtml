@{
    ViewBag.Title = "Estadísticas de Actividad";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link href="~/Content/estadisticas.css?v=15.0" rel="stylesheet" />
}

<div class="estadisticas-container">
    <!-- Header Principal -->
    <div class="estadisticas-header">
        <div class="header-left">
            <a href="@Url.Action("Index")" class="btn-volver">
                <i class="fas fa-arrow-left"></i>
                Volver a Estadísticas
            </a>
        </div>
        <h1 class="estadisticas-title">@ViewBag.Title</h1>
        <div class="header-actions"></div>
    </div>

    <!-- Estadísticas de Actividad -->
    <div class="estadisticas-grid" id="estadisticasActividad">
        <div class="estadistica-card">
            <div class="estadistica-valor" id="totalActividades">-</div>
            <div class="estadistica-label">Total Actividades</div>
        </div>
        <div class="estadistica-card">
            <div class="estadistica-valor" id="actividadesDiarias">-</div>
            <div class="estadistica-label">Actividades Diarias</div>
        </div>
        <div class="estadistica-card">
            <div class="estadistica-valor" id="picoActividad">-</div>
            <div class="estadistica-label">Pico de Actividad</div>
        </div>
        <div class="estadistica-card">
            <div class="estadistica-valor" id="tiempoPromedioSesion">-</div>
            <div class="estadistica-label">Tiempo Promedio Sesión</div>
        </div>
        <div class="estadistica-card">
            <div class="estadistica-valor" id="eficienciaSistema">-</div>
            <div class="estadistica-label">Eficiencia Sistema</div>
        </div>
    </div>

    <!-- Análisis de Patrones de Actividad -->
    <div class="tabla-container">
        <div class="tabla-header">
            <h3 class="tabla-title">Patrones de Actividad</h3>
            <div class="tabla-actions">
                <button class="btn-exportar" onclick="exportarPatrones()">
                    <i class="fas fa-download"></i>
                    Exportar
                </button>
            </div>
        </div>
        <div id="tablaPatrones">
            <div class="loading">Cargando patrones de actividad...</div>
        </div>
    </div>

    <!-- Gráfico de Actividad General -->
    <div class="graficos-container">
        <div class="grafico-header">
            <h3 class="grafico-title">Actividad General del Sistema</h3>
            <div class="grafico-controls">
                <button class="btn-exportar" onclick="exportarActividadGeneral()">
                    <i class="fas fa-download"></i>
                    Exportar
                </button>
            </div>
        </div>
        <div class="grafico-canvas" id="graficoActividad">
            <div class="loading">Cargando gráfico de actividad...</div>
        </div>
    </div>

    <!-- Métricas de Rendimiento -->
    <div class="tabla-container">
        <div class="tabla-header">
            <h3 class="tabla-title">Métricas de Rendimiento</h3>
            <div class="tabla-actions">
                <button class="btn-exportar" onclick="exportarRendimiento()">
                    <i class="fas fa-download"></i>
                    Exportar
                </button>
            </div>
        </div>
        <div id="tablaRendimiento">
            <div class="loading">Cargando métricas de rendimiento...</div>
        </div>
    </div>

    <!-- Heatmap de Actividad -->
    <div class="graficos-container">
        <div class="grafico-header">
            <h3 class="grafico-title">Heatmap de Actividad</h3>
            <div class="grafico-controls">
                <button class="btn-exportar" onclick="exportarHeatmap()">
                    <i class="fas fa-download"></i>
                    Exportar
                </button>
            </div>
        </div>
        <div class="grafico-canvas" id="graficoHeatmap">
            <div class="loading">Cargando heatmap de actividad...</div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script>
        let chartActividad = null;
        let chartHeatmap = null;

        $(document).ready(function() {
            // Establecer fechas por defecto (últimos 30 días)
            const fechaFin = new Date();
            const fechaInicio = new Date();
            fechaInicio.setDate(fechaInicio.getDate() - 30);
            
            const fechaInicioStr = fechaInicio.toISOString().split('T')[0];
            const fechaFinStr = fechaFin.toISOString().split('T')[0];
            
            // Cargar datos iniciales
            cargarGraficoActividad(fechaInicioStr, fechaFinStr);
            cargarHeatmapActividad(fechaInicioStr, fechaFinStr);
            cargarPatronesActividad(fechaInicioStr, fechaFinStr);
            cargarMetricasRendimiento(fechaInicioStr, fechaFinStr);
        });

        function cargarGraficoActividad(fechaInicio, fechaFin) {
            $('#graficoActividad').html('<div class="loading">Cargando gráfico de actividad...</div>');
            
            // Placeholder para gráfico de actividad
            const ctx = document.createElement('canvas');
            $('#graficoActividad').html(ctx);
            
            if (chartActividad) {
                chartActividad.destroy();
            }
            
            // Datos de ejemplo para el gráfico
            const dias = [];
            const prestamos = [];
            const reservas = [];
            const usuarios = [];
            
            for (let i = 0; i < 30; i++) {
                const fecha = new Date();
                fecha.setDate(fecha.getDate() - (29 - i));
                dias.push(fecha.toLocaleDateString('es-ES', { month: 'short', day: 'numeric' }));
                prestamos.push(Math.floor(Math.random() * 20) + 5);
                reservas.push(Math.floor(Math.random() * 15) + 3);
                usuarios.push(Math.floor(Math.random() * 25) + 10);
            }
            
            chartActividad = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dias,
                    datasets: [{
                        label: 'Préstamos',
                        data: prestamos,
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        tension: 0.4
                    }, {
                        label: 'Reservas',
                        data: reservas,
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4
                    }, {
                        label: 'Usuarios Activos',
                        data: usuarios,
                        borderColor: '#f59e0b',
                        backgroundColor: 'rgba(245, 158, 11, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Actividad General del Sistema'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function cargarHeatmapActividad(fechaInicio, fechaFin) {
            $('#graficoHeatmap').html('<div class="loading">Cargando heatmap de actividad...</div>');
            
            const ctx = document.createElement('canvas');
            $('#graficoHeatmap').html(ctx);
            
            if (chartHeatmap) {
                chartHeatmap.destroy();
            }
            
            const diasSemana = ['Domingo', 'Sábado', 'Viernes', 'Jueves', 'Miércoles', 'Martes', 'Lunes'];
            const horas = Array.from({length: 24}, (_, i) => i);
            
            // Generar datos de actividad más realistas
            const datosHeatmap = [];
            const colores = [];
            
            for (let i = 0; i < diasSemana.length; i++) {
                const fila = [];
                const filaColores = [];
                
                for (let j = 0; j < 24; j++) {
                    // Simular patrones de actividad realistas
                    let actividad;
                    if (i >= 1 && i <= 5) { // Lunes a Viernes
                        if (j >= 9 && j <= 17) {
                            actividad = Math.floor(Math.random() * 8) + 5; // Alta actividad durante horario laboral
                        } else if (j >= 19 && j <= 22) {
                            actividad = Math.floor(Math.random() * 6) + 3; // Actividad moderada en la tarde/noche
                        } else {
                            actividad = Math.floor(Math.random() * 3); // Baja actividad
                        }
                    } else { // Sábado y Domingo
                        if (j >= 10 && j <= 18) {
                            actividad = Math.floor(Math.random() * 6) + 3;
                        } else {
                            actividad = Math.floor(Math.random() * 3);
                        }
                    }
                    
                    fila.push(actividad);
                    
                    // Asignar colores según el nivel de actividad (0-10)
                    const intensidad = actividad / 10;
                    let color;
                    if (intensidad >= 0.7) {
                        color = '#dc2626'; // Rojo oscuro - alta actividad
                    } else if (intensidad >= 0.5) {
                        color = '#f59e0b'; // Naranja - actividad media-alta
                    } else if (intensidad >= 0.3) {
                        color = '#eab308'; // Amarillo - actividad media
                    } else if (intensidad >= 0.1) {
                        color = '#84cc16'; // Verde claro - actividad baja
                    } else {
                        color = '#d1d5db'; // Gris claro - sin actividad
                    }
                    
                    filaColores.push(color);
                }
                
                datosHeatmap.push(fila);
                colores.push(filaColores);
            }
            
            chartHeatmap = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: horas,
                    datasets: diasSemana.map((dia, diaIndex) => ({
                        label: dia,
                        data: datosHeatmap[diaIndex],
                        backgroundColor: colores[diaIndex].map((color, idx) => color),
                        borderColor: colores[diaIndex].map(() => 'rgba(0, 0, 0, 0.1)'),
                        borderWidth: 1
                    }))
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    indexAxis: 'x',
                    plugins: {
                        legend: {
                            display: true,
                            position: 'bottom'
                        },
                        title: {
                            display: true,
                            text: 'Actividad por Hora del Día',
                            font: {
                                size: 16,
                                weight: 'bold'
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const value = context.parsed.y;
                                    const day = context.dataset.label;
                                    const hour = context.label;
                                    return `${day} ${hour}:00 - Nivel: ${value}/10`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            stacked: false,
                            title: {
                                display: true,
                                text: 'Hora del Día',
                                font: {
                                    size: 14,
                                    weight: 'bold'
                                }
                            }
                        },
                        y: {
                            stacked: false,
                            beginAtZero: true,
                            max: 10,
                            title: {
                                display: true,
                                text: 'Nivel de Actividad',
                                font: {
                                    size: 14,
                                    weight: 'bold'
                                }
                            }
                        }
                    }
                }
            });
        }

        function cargarPatronesActividad(fechaInicio, fechaFin) {
            $('#tablaPatrones').html('<div class="loading">Cargando patrones de actividad...</div>');
            
            // Datos de ejemplo para patrones
            const patrones = [
                { Patron: 'Día de la Semana', Valor: 'Viernes', Frecuencia: '35%', Tendencia: 'Creciente' },
                { Patron: 'Hora del Día', Valor: '14:00-16:00', Frecuencia: '28%', Tendencia: 'Estable' },
                { Patron: 'Tipo de Actividad', Valor: 'Préstamos', Frecuencia: '45%', Tendencia: 'Creciente' },
                { Patron: 'Usuario Activo', Valor: 'Usuario Principal', Frecuencia: '22%', Tendencia: 'Estable' },
                { Patron: 'Espacio Popular', Valor: 'Cancha de Fútbol', Frecuencia: '18%', Tendencia: 'Creciente' }
            ];
            
            let html = '<table class="tabla-datos"><thead><tr><th>Patrón</th><th>Valor</th><th>Frecuencia</th><th>Tendencia</th></tr></thead><tbody>';
            
            patrones.forEach(p => {
                const tendenciaClass = p.Tendencia === 'Creciente' ? 'positiva' : p.Tendencia === 'Decreciente' ? 'negativa' : '';
                html += `<tr>
                    <td>${p.Patron}</td>
                    <td>${p.Valor}</td>
                    <td>${p.Frecuencia}</td>
                    <td class="${tendenciaClass}">${p.Tendencia}</td>
                </tr>`;
            });
            
            html += '</tbody></table>';
            $('#tablaPatrones').html(html);
        }

        function cargarMetricasRendimiento(fechaInicio, fechaFin) {
            $('#tablaRendimiento').html('<div class="loading">Cargando métricas de rendimiento...</div>');
            
            // Datos de ejemplo para métricas
            const metricas = [
                { Metrica: 'Tiempo de Respuesta Promedio', Valor: '245ms', Estado: 'Excelente', Tendencia: 'Mejorando' },
                { Metrica: 'Disponibilidad del Sistema', Valor: '99.8%', Estado: 'Excelente', Tendencia: 'Estable' },
                { Metrica: 'Carga de Servidor', Valor: '45%', Estado: 'Bueno', Tendencia: 'Estable' },
                { Metrica: 'Memoria Utilizada', Valor: '2.1GB', Estado: 'Bueno', Tendencia: 'Estable' },
                { Metrica: 'Consultas por Minuto', Valor: '156', Estado: 'Excelente', Tendencia: 'Creciente' },
                { Metrica: 'Errores por Hora', Valor: '0.2', Estado: 'Excelente', Tendencia: 'Mejorando' }
            ];
            
            let html = '<table class="tabla-datos"><thead><tr><th>Métrica</th><th>Valor</th><th>Estado</th><th>Tendencia</th></tr></thead><tbody>';
            
            metricas.forEach(m => {
                const estadoClass = m.Estado === 'Excelente' ? 'positiva' : m.Estado === 'Bueno' ? '' : 'negativa';
                const tendenciaClass = m.Tendencia === 'Mejorando' ? 'positiva' : m.Tendencia === 'Empeorando' ? 'negativa' : '';
                
                html += `<tr>
                    <td>${m.Metrica}</td>
                    <td>${m.Valor}</td>
                    <td class="${estadoClass}">${m.Estado}</td>
                    <td class="${tendenciaClass}">${m.Tendencia}</td>
                </tr>`;
            });
            
            html += '</tbody></table>';
            $('#tablaRendimiento').html(html);
        }

        function actualizarEstadisticasActividad() {
            // Datos de ejemplo para estadísticas
            $('#totalActividades').text('1,247');
            $('#actividadesDiarias').text('42');
            $('#picoActividad').text('Viernes 14:00');
            $('#tiempoPromedioSesion').text('23 min');
            $('#eficienciaSistema').text('94.5%');
        }

        function exportarPatrones() {
            const tabla = document.getElementById('tablaPatrones');
            if (tabla) {
                html2canvas(tabla).then(canvas => {
                    const url = canvas.toDataURL('image/jpeg', 0.9);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'patrones_actividad_' + new Date().toISOString().split('T')[0] + '.jpg';
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                });
            }
        }

        function exportarActividadGeneral() {
            const canvas = document.querySelector('#graficoActividad canvas');
            if (canvas) {
                const tempCanvas = document.createElement('canvas');
                const tempCtx = tempCanvas.getContext('2d');
                
                const scale = 2;
                tempCanvas.width = canvas.width * scale;
                tempCanvas.height = canvas.height * scale;
                tempCtx.scale(scale, scale);
                
                tempCtx.drawImage(canvas, 0, 0);
                
                tempCanvas.toBlob(function(blob) {
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'actividad_general_' + new Date().toISOString().split('T')[0] + '.jpg';
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                }, 'image/jpeg', 0.9);
            }
        }

        function exportarRendimiento() {
            const tabla = document.getElementById('tablaRendimiento');
            if (tabla) {
                html2canvas(tabla).then(canvas => {
                    const url = canvas.toDataURL('image/jpeg', 0.9);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'metricas_rendimiento_' + new Date().toISOString().split('T')[0] + '.jpg';
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                });
            }
        }

        function exportarHeatmap() {
            const canvas = document.querySelector('#graficoHeatmap canvas');
            if (canvas) {
                const tempCanvas = document.createElement('canvas');
                const tempCtx = tempCanvas.getContext('2d');
                
                const scale = 2;
                tempCanvas.width = canvas.width * scale;
                tempCanvas.height = canvas.height * scale;
                tempCtx.scale(scale, scale);
                
                tempCtx.drawImage(canvas, 0, 0);
                
                tempCanvas.toBlob(function(blob) {
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'heatmap_actividad_' + new Date().toISOString().split('T')[0] + '.jpg';
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                }, 'image/jpeg', 0.9);
            }
        }

        // Actualizar estadísticas después de cargar los datos
        setTimeout(actualizarEstadisticasActividad, 2000);
    </script>
}