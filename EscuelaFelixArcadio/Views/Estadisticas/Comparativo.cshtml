@{
    ViewBag.Title = "Análisis Comparativo";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link href="~/Content/estadisticas.css?v=15.0" rel="stylesheet" />
}

<div class="estadisticas-container">
    <!-- Header Principal -->
    <div class="estadisticas-header">
        <div class="header-left">
            <a href="@Url.Action("Index")" class="btn-volver">
                <i class="fas fa-arrow-left"></i>
                Volver a Estadísticas
            </a>
        </div>
        <h1 class="estadisticas-title">@ViewBag.Title</h1>
        <div class="header-actions"></div>
    </div>

    <!-- Estadísticas Comparativas -->
    <div class="estadisticas-grid" id="estadisticasComparativas">
        <div class="estadistica-card">
            <div class="estadistica-valor" id="diferenciaTotal">-</div>
            <div class="estadistica-label">Diferencia Total</div>
        </div>
        <div class="estadistica-card">
            <div class="estadistica-valor" id="porcentajeCambio">-</div>
            <div class="estadistica-label">% Cambio</div>
        </div>
        <div class="estadistica-card">
            <div class="estadistica-valor" id="tendencia">-</div>
            <div class="estadistica-label">Tendencia</div>
        </div>
        <div class="estadistica-card">
            <div class="estadistica-valor" id="significancia">-</div>
            <div class="estadistica-label">Significancia</div>
        </div>
        <div class="estadistica-card">
            <div class="estadistica-valor" id="confianza">-</div>
            <div class="estadistica-label">Nivel Confianza</div>
        </div>
    </div>

    <!-- Resultados de Comparación -->
    <div class="comparativo-container" id="resultadosComparacion">
        <div class="periodo-comparacion">
            <div class="periodo-card" id="periodo1Card">
                <div class="periodo-titulo">Período 1</div>
                <div class="periodo-fecha" id="periodo1Fecha">-</div>
                <div class="periodo-valor" id="periodo1Valor">-</div>
                <div class="periodo-label" id="periodo1Label">Total</div>
            </div>
            
            <div class="comparacion-separador">VS</div>
            
            <div class="periodo-card" id="periodo2Card">
                <div class="periodo-titulo">Período 2</div>
                <div class="periodo-fecha" id="periodo2Fecha">-</div>
                <div class="periodo-valor" id="periodo2Valor">-</div>
                <div class="periodo-label" id="periodo2Label">Total</div>
            </div>
        </div>

        <div class="diferencias-card" id="diferenciasCard">
            <div class="diferencias-titulo">Análisis de Diferencias</div>
            <div id="diferenciasContenido">
                <div class="loading">Selecciona períodos para comparar</div>
            </div>
        </div>
    </div>

    <!-- Gráfico Comparativo -->
    <div class="graficos-container">
        <div class="grafico-header">
            <h3 class="grafico-title">Visualización Comparativa</h3>
            <div class="grafico-controls">
                <button class="btn-exportar" onclick="exportarDatos('comparativo')">
                    <i class="fas fa-download"></i>
                    Exportar
                </button>
            </div>
        </div>
        <div class="grafico-canvas" id="graficoComparativo">
            <div class="loading">Selecciona períodos para comparar</div>
        </div>
    </div>

    <!-- Análisis de Variaciones Temporales -->
    <div class="tabla-container">
        <div class="tabla-header">
            <h3 class="tabla-title">Variaciones Temporales</h3>
        </div>
        <div id="tablaVariaciones">
            <div class="loading">Cargando variaciones...</div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let chartComparativo = null;

        $(document).ready(function() {
            // Establecer fechas por defecto
            const fechaFin = new Date();
            const fechaInicio = new Date();
            fechaInicio.setDate(fechaInicio.getDate() - 30);
            
            const fechaFin2 = new Date();
            fechaFin2.setDate(fechaFin2.getDate() - 30);
            const fechaInicio2 = new Date();
            fechaInicio2.setDate(fechaInicio2.getDate() - 60);
            
            // Comparar períodos con fechas por defecto
            compararPeriodos('prestamos', fechaInicio2.toISOString().split('T')[0], fechaFin2.toISOString().split('T')[0], 
                            fechaInicio.toISOString().split('T')[0], fechaFin.toISOString().split('T')[0]);
            
            // Cargar variaciones temporales automáticamente
            cargarVariaciones();
        });

        function compararPeriodos(tipoAnalisis = 'prestamos', periodo1Inicio = null, periodo1Fin = null, periodo2Inicio = null, periodo2Fin = null) {
            // Si no se proporcionan fechas, usar valores por defecto
            if (!periodo1Inicio) {
                const fechaFin2 = new Date();
                fechaFin2.setDate(fechaFin2.getDate() - 30);
                const fechaInicio2 = new Date();
                fechaInicio2.setDate(fechaInicio2.getDate() - 60);
                periodo1Inicio = fechaInicio2.toISOString().split('T')[0];
                periodo1Fin = fechaFin2.toISOString().split('T')[0];
            }
            
            if (!periodo2Inicio) {
                const fechaFin = new Date();
                const fechaInicio = new Date();
                fechaInicio.setDate(fechaInicio.getDate() - 30);
                periodo2Inicio = fechaInicio.toISOString().split('T')[0];
                periodo2Fin = fechaFin.toISOString().split('T')[0];
            }
            
            $('#diferenciasContenido').html('<div class="loading">Comparando períodos...</div>');
            $('#graficoComparativo').html('<div class="loading">Generando gráfico comparativo...</div>');
            
            $.get('@Url.Action("CompararPeriodos")', {
                tipoAnalisis: tipoAnalisis,
                periodo1Inicio: periodo1Inicio,
                periodo1Fin: periodo1Fin,
                periodo2Inicio: periodo2Inicio,
                periodo2Fin: periodo2Fin
            }, function(response) {
                if (response.success) {
                    mostrarComparacion(response.data, tipoAnalisis);
                    crearGraficoComparativo(response.data, tipoAnalisis);
                    actualizarEstadisticasComparativas(response.data, tipoAnalisis);
                } else {
                    $('#diferenciasContenido').html('<div class="error-message">Error al comparar períodos</div>');
                }
            }).fail(function() {
                $('#diferenciasContenido').html('<div class="error-message">Error al comparar períodos</div>');
            });
        }

        function mostrarComparacion(datos, tipoAnalisis = 'prestamos') {
            if (!datos || !datos.Periodo1 || !datos.Periodo2) {
                $('#diferenciasContenido').html('<div class="error-message">No hay datos disponibles</div>');
                return;
            }
            
            // Actualizar fechas
            $('#periodo1Fecha').text(datos.Periodo1.Inicio + ' - ' + datos.Periodo1.Fin);
            $('#periodo2Fecha').text(datos.Periodo2.Inicio + ' - ' + datos.Periodo2.Fin);
            
            // Actualizar valores según el tipo de análisis
            let valor1 = 0, valor2 = 0, label1 = '', label2 = '';
            
            switch (tipoAnalisis) {
                case 'prestamos':
                    valor1 = datos.Periodo1.TotalPrestamos || 0;
                    valor2 = datos.Periodo2.TotalPrestamos || 0;
                    label1 = 'Total Préstamos';
                    label2 = 'Total Préstamos';
                    break;
                case 'espacios':
                    valor1 = datos.Periodo1.TotalReservas || 0;
                    valor2 = datos.Periodo2.TotalReservas || 0;
                    label1 = 'Total Reservas';
                    label2 = 'Total Reservas';
                    break;
                case 'usuarios':
                    valor1 = datos.Periodo1.UsuariosUnicos || 0;
                    valor2 = datos.Periodo2.UsuariosUnicos || 0;
                    label1 = 'Usuarios Únicos';
                    label2 = 'Usuarios Únicos';
                    break;
                case 'inventario':
                    valor1 = datos.Periodo1.TotalItems || 0;
                    valor2 = datos.Periodo2.TotalItems || 0;
                    label1 = 'Total Items';
                    label2 = 'Total Items';
                    break;
            }
            
            $('#periodo1Valor').text(valor1);
            $('#periodo2Valor').text(valor2);
            $('#periodo1Label').text(label1);
            $('#periodo2Label').text(label2);
            
            // Mostrar diferencias
            let html = '';
            if (datos.Diferencias) {
                for (const [key, value] of Object.entries(datos.Diferencias)) {
                    if (typeof value === 'number') {
                        const esPorcentaje = key.includes('Porc');
                        const valorFormateado = esPorcentaje ? value.toFixed(1) + '%' : value;
                        const clase = value > 0 ? 'positiva' : value < 0 ? 'negativa' : '';
                        
                        html += `<div class="diferencia-item">
                            <div class="diferencia-label">${key.replace(/([A-Z])/g, ' $1').trim()}</div>
                            <div class="diferencia-valor ${clase}">${valorFormateado}</div>
                        </div>`;
                    }
                }
            }
            
            $('#diferenciasContenido').html(html);
        }

        function crearGraficoComparativo(datos, tipoAnalisis = 'prestamos') {
            if (!datos || !datos.Periodo1 || !datos.Periodo2) {
                $('#graficoComparativo').html('<div class="error-message">No hay datos disponibles para el gráfico</div>');
                return;
            }
            
            const ctx = document.createElement('canvas');
            $('#graficoComparativo').html(ctx);
            
            if (chartComparativo) {
                chartComparativo.destroy();
            }
            
            let label1, label2, valor1, valor2;
            
            switch (tipoAnalisis) {
                case 'prestamos':
                    label1 = 'Préstamos P1';
                    label2 = 'Préstamos P2';
                    valor1 = datos.Periodo1.TotalPrestamos || 0;
                    valor2 = datos.Periodo2.TotalPrestamos || 0;
                    break;
                case 'espacios':
                    label1 = 'Reservas P1';
                    label2 = 'Reservas P2';
                    valor1 = datos.Periodo1.TotalReservas || 0;
                    valor2 = datos.Periodo2.TotalReservas || 0;
                    break;
                case 'usuarios':
                    label1 = 'Usuarios P1';
                    label2 = 'Usuarios P2';
                    valor1 = datos.Periodo1.UsuariosUnicos || 0;
                    valor2 = datos.Periodo2.UsuariosUnicos || 0;
                    break;
                case 'inventario':
                    label1 = 'Items P1';
                    label2 = 'Items P2';
                    valor1 = datos.Periodo1.TotalItems || 0;
                    valor2 = datos.Periodo2.TotalItems || 0;
                    break;
            }
            
            chartComparativo = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Período 1', 'Período 2'],
                    datasets: [{
                        label: 'Comparación',
                        data: [valor1, valor2],
                        backgroundColor: ['#10b981', '#3b82f6'],
                        borderColor: ['#0ea47e', '#2563eb'],
                        borderWidth: 2,
                        borderRadius: 8,
                        barThickness: 'flex',
                        maxBarThickness: 100
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    layout: {
                        padding: {
                            top: 20,
                            bottom: 10
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                            labels: {
                                usePointStyle: true,
                                padding: 15,
                                font: {
                                    size: 13,
                                    weight: '600'
                                }
                            }
                        },
                        title: {
                            display: true,
                            text: `Comparación de ${tipoAnalisis.charAt(0).toUpperCase() + tipoAnalisis.slice(1)}`,
                            font: {
                                size: 16,
                                weight: 'bold'
                            },
                            padding: {
                                top: 10,
                                bottom: 20
                            },
                            color: '#1f2937'
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            padding: 12,
                            titleFont: {
                                size: 14,
                                weight: 'bold'
                            },
                            bodyFont: {
                                size: 13
                            },
                            borderColor: 'rgba(255, 255, 255, 0.2)',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    return `${context.dataset.label}: ${context.parsed.y}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                font: {
                                    size: 12,
                                    weight: '500'
                                }
                            }
                        },
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.05)',
                                lineWidth: 1
                            },
                            ticks: {
                                font: {
                                    size: 12
                                },
                                callback: function(value) {
                                    return value;
                                }
                            }
                        }
                    }
                }
            });
        }

        function cargarVariaciones() {
            const tipoAnalisis = 'prestamos';
            const periodo = 'mensual';
            
            $('#tablaVariaciones').html('<div class="loading">Cargando variaciones temporales...</div>');
            
            $.get('@Url.Action("VariacionesTemporales")', {
                tipoAnalisis: tipoAnalisis,
                periodo: periodo
            }, function(response) {
                if (response.success) {
                    mostrarVariaciones(response.data);
                } else {
                    $('#tablaVariaciones').html('<div class="error-message">Error al cargar variaciones</div>');
                }
            }).fail(function() {
                $('#tablaVariaciones').html('<div class="error-message">Error al cargar variaciones</div>');
            });
        }

        function mostrarVariaciones(datos) {
            if (!datos || !Array.isArray(datos) || datos.length === 0) {
                $('#tablaVariaciones').html('<div class="error-message">No hay datos de variaciones disponibles</div>');
                return;
            }
            
            let html = '<div style="overflow-x: auto;"><table class="tabla-datos" style="width: 100%; border-collapse: collapse; font-size: 14px;"><thead><tr style="background-color: #f8f9fa; border-bottom: 2px solid #e0e0e0;"><th style="padding: 12px; text-align: left; font-weight: 600; color: #333;">Período</th><th style="padding: 12px; text-align: center; font-weight: 600; color: #333;">Valor</th><th style="padding: 12px; text-align: center; font-weight: 600; color: #333;">Variación</th><th style="padding: 12px; text-align: center; font-weight: 600; color: #333;">Tendencia</th></tr></thead><tbody>';
            
            datos.forEach((d, index) => {
                const claseVariacion = d.Variacion > 0 ? 'positiva' : d.Variacion < 0 ? 'negativa' : '';
                const badgeClass = d.Tendencia === 'Creciente' ? 'badge-success' : d.Tendencia === 'Decreciente' ? 'badge-danger' : 'badge-info';
                const bgColor = index % 2 === 0 ? '#ffffff' : '#f8f9fa';
                
                html += `<tr style="background-color: ${bgColor}; border-bottom: 1px solid #e0e0e0;">
                    <td style="padding: 12px; font-weight: 500; color: #495057;">${d.Periodo || '-'}</td>
                    <td style="padding: 12px; text-align: center; font-weight: 600; color: #333;">${d.Valor || 0}</td>
                    <td style="padding: 12px; text-align: center;"><span class="${claseVariacion}" style="color: ${claseVariacion === 'positiva' ? '#10b981' : claseVariacion === 'negativa' ? '#ef4444' : '#6b7280'}; font-weight: 600;">${d.Variacion ? (d.Variacion > 0 ? '+' : '') + d.Variacion.toFixed(1) : '0.0'}%</td>
                    <td style="padding: 12px; text-align: center;"><span style="background-color: ${d.Tendencia === 'Creciente' ? '#dcfce7' : d.Tendencia === 'Decreciente' ? '#fee2e2' : '#e0f2fe'}; color: ${d.Tendencia === 'Creciente' ? '#16a34a' : d.Tendencia === 'Decreciente' ? '#dc2626' : '#0284c7'}; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600; text-transform: uppercase;">${d.Tendencia || 'Estable'}</span></td>
                </tr>`;
            });
            
            html += '</tbody></table></div>';
            $('#tablaVariaciones').html(html);
        }

        function actualizarEstadisticasComparativas(datos, tipoAnalisis = 'prestamos') {
            let diferenciaTotal = 0, porcentajeCambio = 0;
            
            if (datos && datos.Diferencias) {
                switch (tipoAnalisis) {
                    case 'prestamos':
                        diferenciaTotal = datos.Diferencias.TotalPrestamos || 0;
                        porcentajeCambio = datos.Diferencias.TotalPrestamosPorc || 0;
                        break;
                    case 'espacios':
                        diferenciaTotal = datos.Diferencias.TotalReservas || 0;
                        porcentajeCambio = datos.Diferencias.TotalReservasPorc || 0;
                        break;
                    case 'usuarios':
                        diferenciaTotal = datos.Diferencias.UsuariosUnicos || 0;
                        porcentajeCambio = datos.Diferencias.UsuariosUnicosPorc || 0;
                        break;
                    case 'inventario':
                        diferenciaTotal = datos.Diferencias.TotalItems || 0;
                        porcentajeCambio = datos.Diferencias.TotalItemsPorc || 0;
                        break;
                }
            }
            
            $('#diferenciaTotal').text(diferenciaTotal);
            $('#porcentajeCambio').text(porcentajeCambio.toFixed(1) + '%');
            $('#tendencia').text(porcentajeCambio > 0 ? 'Creciente' : porcentajeCambio < 0 ? 'Decreciente' : 'Estable');
            $('#significancia').text(Math.abs(porcentajeCambio) > 10 ? 'Alta' : Math.abs(porcentajeCambio) > 5 ? 'Media' : 'Baja');
            $('#confianza').text('85%'); // Placeholder
        }

        function exportarDatos(tipo) {
            // Exportar como imagen JPG
            let canvas = null;
            let nombreArchivo = '';
            
            const tipoAnalisis = 'prestamos';
            
            // Obtener el canvas del gráfico
            if (chartComparativo && chartComparativo.canvas) {
                canvas = chartComparativo.canvas;
                nombreArchivo = `comparativo_${tipoAnalisis}_${new Date().getTime()}`;
                
                // Crear un canvas temporal con mayor resolución para mejor calidad
                const tempCanvas = document.createElement('canvas');
                const tempCtx = tempCanvas.getContext('2d');
                
                // Configurar dimensiones para mejor calidad (2x para alta resolución)
                tempCanvas.width = canvas.width * 2;
                tempCanvas.height = canvas.height * 2;
                
                // Escalar el contenido
                tempCtx.scale(2, 2);
                tempCtx.drawImage(canvas, 0, 0);
                
                // Convertir a imagen JPG con alta calidad
                const dataURL = tempCanvas.toDataURL('image/jpeg', 0.9);
                
                // Crear enlace de descarga
                const link = document.createElement('a');
                link.download = nombreArchivo + '.jpg';
                link.href = dataURL;
                
                // Simular click para descargar
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            } else {
                alert('No hay gráfico para exportar');
            }
        }
    </script>
}